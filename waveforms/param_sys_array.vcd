$date
	Mon Mar 31 23:15:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module parameterized_systolic_array $end
$var wire 1 ! clk $end
$var wire 1 " load_weights $end
$var wire 1 # reset $end
$var wire 1 $ start $end
$var wire 256 % w_in [255:0] $end
$var wire 64 & x_in [63:0] $end
$var wire 16 ' zero_wire [15:0] $end
$var wire 64 ( y_out [63:0] $end
$var parameter 32 ) DATA_WIDTH $end
$var parameter 32 * N $end
$var reg 1 + done $end
$var integer 32 , k [31:0] $end
$scope begin pack_outputs[0] $end
$var parameter 2 - i $end
$upscope $end
$scope begin pack_outputs[1] $end
$var parameter 2 . i $end
$upscope $end
$scope begin pack_outputs[2] $end
$var parameter 3 / i $end
$upscope $end
$scope begin pack_outputs[3] $end
$var parameter 3 0 i $end
$upscope $end
$scope begin row_gen[0] $end
$var parameter 2 1 i $end
$scope begin col_gen[0] $end
$var wire 16 2 w_ij [15:0] $end
$var parameter 2 3 j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 4 input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 5 psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 6 weight [15:0] $end
$var parameter 32 7 DATA_WIDTH $end
$var reg 16 8 input_out [15:0] $end
$var reg 16 9 psum_out [15:0] $end
$var reg 16 : weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[1] $end
$var wire 16 ; w_ij [15:0] $end
$var parameter 2 < j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 = input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 > psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 ? weight [15:0] $end
$var parameter 32 @ DATA_WIDTH $end
$var reg 16 A input_out [15:0] $end
$var reg 16 B psum_out [15:0] $end
$var reg 16 C weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[2] $end
$var wire 16 D w_ij [15:0] $end
$var parameter 3 E j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 F input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 G psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 H weight [15:0] $end
$var parameter 32 I DATA_WIDTH $end
$var reg 16 J input_out [15:0] $end
$var reg 16 K psum_out [15:0] $end
$var reg 16 L weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[3] $end
$var wire 16 M w_ij [15:0] $end
$var parameter 3 N j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 O input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 P psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 Q weight [15:0] $end
$var parameter 32 R DATA_WIDTH $end
$var reg 16 S input_out [15:0] $end
$var reg 16 T psum_out [15:0] $end
$var reg 16 U weight_reg [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin row_gen[1] $end
$var parameter 2 V i $end
$scope begin col_gen[0] $end
$var wire 16 W w_ij [15:0] $end
$var parameter 2 X j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 Y input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 Z psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 [ weight [15:0] $end
$var parameter 32 \ DATA_WIDTH $end
$var reg 16 ] input_out [15:0] $end
$var reg 16 ^ psum_out [15:0] $end
$var reg 16 _ weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[1] $end
$var wire 16 ` w_ij [15:0] $end
$var parameter 2 a j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 b input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 c psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 d weight [15:0] $end
$var parameter 32 e DATA_WIDTH $end
$var reg 16 f input_out [15:0] $end
$var reg 16 g psum_out [15:0] $end
$var reg 16 h weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[2] $end
$var wire 16 i w_ij [15:0] $end
$var parameter 3 j j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 k input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 l psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 m weight [15:0] $end
$var parameter 32 n DATA_WIDTH $end
$var reg 16 o input_out [15:0] $end
$var reg 16 p psum_out [15:0] $end
$var reg 16 q weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[3] $end
$var wire 16 r w_ij [15:0] $end
$var parameter 3 s j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 t input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 u psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 v weight [15:0] $end
$var parameter 32 w DATA_WIDTH $end
$var reg 16 x input_out [15:0] $end
$var reg 16 y psum_out [15:0] $end
$var reg 16 z weight_reg [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin row_gen[2] $end
$var parameter 3 { i $end
$scope begin col_gen[0] $end
$var wire 16 | w_ij [15:0] $end
$var parameter 2 } j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 ~ input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 !" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 "" weight [15:0] $end
$var parameter 32 #" DATA_WIDTH $end
$var reg 16 $" input_out [15:0] $end
$var reg 16 %" psum_out [15:0] $end
$var reg 16 &" weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[1] $end
$var wire 16 '" w_ij [15:0] $end
$var parameter 2 (" j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 )" input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 *" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 +" weight [15:0] $end
$var parameter 32 ," DATA_WIDTH $end
$var reg 16 -" input_out [15:0] $end
$var reg 16 ." psum_out [15:0] $end
$var reg 16 /" weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[2] $end
$var wire 16 0" w_ij [15:0] $end
$var parameter 3 1" j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 2" input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 3" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 4" weight [15:0] $end
$var parameter 32 5" DATA_WIDTH $end
$var reg 16 6" input_out [15:0] $end
$var reg 16 7" psum_out [15:0] $end
$var reg 16 8" weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[3] $end
$var wire 16 9" w_ij [15:0] $end
$var parameter 3 :" j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 ;" input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 <" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 =" weight [15:0] $end
$var parameter 32 >" DATA_WIDTH $end
$var reg 16 ?" input_out [15:0] $end
$var reg 16 @" psum_out [15:0] $end
$var reg 16 A" weight_reg [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin row_gen[3] $end
$var parameter 3 B" i $end
$scope begin col_gen[0] $end
$var wire 16 C" w_ij [15:0] $end
$var parameter 2 D" j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 E" input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 F" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 G" weight [15:0] $end
$var parameter 32 H" DATA_WIDTH $end
$var reg 16 I" input_out [15:0] $end
$var reg 16 J" psum_out [15:0] $end
$var reg 16 K" weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[1] $end
$var wire 16 L" w_ij [15:0] $end
$var parameter 2 M" j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 N" input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 O" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 P" weight [15:0] $end
$var parameter 32 Q" DATA_WIDTH $end
$var reg 16 R" input_out [15:0] $end
$var reg 16 S" psum_out [15:0] $end
$var reg 16 T" weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[2] $end
$var wire 16 U" w_ij [15:0] $end
$var parameter 3 V" j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 W" input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 X" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 Y" weight [15:0] $end
$var parameter 32 Z" DATA_WIDTH $end
$var reg 16 [" input_out [15:0] $end
$var reg 16 \" psum_out [15:0] $end
$var reg 16 ]" weight_reg [15:0] $end
$upscope $end
$upscope $end
$scope begin col_gen[3] $end
$var wire 16 ^" w_ij [15:0] $end
$var parameter 3 _" j $end
$scope module pe_inst $end
$var wire 1 ! clk $end
$var wire 16 `" input_in [15:0] $end
$var wire 1 " load_weight $end
$var wire 16 a" psum_in [15:0] $end
$var wire 1 # reset $end
$var wire 1 $ valid $end
$var wire 16 b" weight [15:0] $end
$var parameter 32 c" DATA_WIDTH $end
$var reg 16 d" input_out [15:0] $end
$var reg 16 e" psum_out [15:0] $end
$var reg 16 f" weight_reg [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 c"
b11 _"
b10000 Z"
b10 V"
b10000 Q"
b1 M"
b10000 H"
b0 D"
b11 B"
b10000 >"
b11 :"
b10000 5"
b10 1"
b10000 ,"
b1 ("
b10000 #"
b0 }
b10 {
b10000 w
b11 s
b10000 n
b10 j
b10000 e
b1 a
b10000 \
b0 X
b1 V
b10000 R
b11 N
b10000 I
b10 E
b10000 @
b1 <
b10000 7
b0 3
b0 1
b11 0
b10 /
b1 .
b0 -
b100 *
b10000 )
$end
#0
$dumpvars
b0 f"
b0 e"
b0 d"
b0 b"
b0 a"
b0 `"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Y"
b0 X"
b0 W"
b0 U"
b0 T"
b0 S"
b0 R"
b0 P"
b0 O"
b0 N"
b0 L"
b0 K"
b0 J"
b0 I"
b0 G"
b0 F"
b0 E"
b0 C"
b0 A"
b0 @"
b0 ?"
b0 ="
b0 <"
b0 ;"
b0 9"
b0 8"
b0 7"
b0 6"
b0 4"
b0 3"
b0 2"
b0 0"
b0 /"
b0 ."
b0 -"
b0 +"
b0 *"
b0 )"
b0 '"
b0 &"
b0 %"
b0 $"
b0 ""
b0 !"
b0 ~
b0 |
b0 z
b0 y
b0 x
b0 v
b0 u
b0 t
b0 r
b0 q
b0 p
b0 o
b0 m
b0 l
b0 k
b0 i
b0 h
b0 g
b0 f
b0 d
b0 c
b0 b
b0 `
b0 _
b0 ^
b0 ]
b0 [
b0 Z
b0 Y
b0 W
b0 U
b0 T
b0 S
b0 Q
b0 P
b0 O
b0 M
b0 L
b0 K
b0 J
b0 H
b0 G
b0 F
b0 D
b0 C
b0 B
b0 A
b0 ?
b0 >
b0 =
b0 ;
b0 :
b0 9
b0 8
b0 6
b0 5
b0 4
b0 2
b100 ,
0+
b0 (
b0 '
b0 &
b0 %
0$
1#
0"
1!
$end
#5
0!
#10
b100 ,
1!
#15
0!
#20
b1 2
b1 6
b10 ;
b10 ?
b11 D
b11 H
b100 M
b100 Q
b101 W
b101 [
b110 `
b110 d
b111 i
b111 m
b1000 r
b1000 v
b1001 |
b1001 ""
b1010 '"
b1010 +"
b1011 0"
b1011 4"
b1100 9"
b1100 ="
b1101 C"
b1101 G"
b1110 L"
b1110 P"
b1111 U"
b1111 Y"
b10000 ^"
b10000 b"
b10000000000000000111100000000000011100000000000001101000000000000110000000000000010110000000000001010000000000000100100000000000010000000000000000111000000000000011000000000000001010000000000000100000000000000001100000000000000100000000000000001 %
1"
1!
0#
#25
0!
#30
b1 4
b1 &
1$
0"
b10000 f"
b1111 ]"
b1110 T"
b1101 K"
b1100 A"
b1011 8"
b1010 /"
b1001 &"
b1000 z
b111 q
b110 h
b101 _
b100 U
b11 L
b10 C
b1 :
1!
#35
0!
#40
b10 4
b101 Y
b1010000000000000010 &
b1 =
b1 8
b1 Z
b1 9
1+
b100 ,
1!
#45
0!
#50
b11 4
b110 Y
b1001 ~
b100100000000000001100000000000000011 &
b101 b
b101 ]
b11010 !"
b11010 ^
b1 F
b1 A
b10 c
b10 B
b10 =
b10 8
b10 Z
b10 9
b100 ,
1!
#55
0!
#60
b100 4
b111 Y
b1010 ~
b1101 E"
b1101000000000000101000000000000001110000000000000100 &
b11 =
b11 8
b11 Z
b11 9
b10 F
b10 A
b100 c
b100 B
b1 O
b1 J
b11 l
b11 K
b110 b
b110 ]
b100000 !"
b100000 ^
b101 k
b101 f
b100000 *"
b100000 g
b1001 )"
b1001 $"
b1101011 F"
b1101011 %"
b100 ,
1!
#65
0!
#70
b0 4
b1000 Y
b1011 ~
b1110 E"
b1110000000000000101100000000000010000000000000000000 &
b1101 N"
b1101 I"
b100010100 J"
b1001 2"
b1001 -"
b1111010 O"
b1111010 ."
b1010 )"
b1010 $"
b1111010 F"
b1111010 %"
b101 t
b101 o
b100110 3"
b100110 p
b110 k
b110 f
b101000 *"
b101000 g
b111 b
b111 ]
b100110 !"
b100110 ^
b1 S
b100 u
b100 T
b10 O
b10 J
b110 l
b110 K
b11 F
b11 A
b110 c
b110 B
b100 =
b100 8
b100 Z
b100 9
b100 ,
1!
#75
0!
#80
b0 Y
b1100 ~
b1111 E"
b1111000000000000110000000000000000000000000000000000 &
b0 =
b0 8
b0 Z
b0 9
b100 F
b100 A
b1000 c
b1000 B
b11 O
b11 J
b1001 l
b1001 K
b10 S
b1000 u
b1000 T
b1000 b
b1000 ]
b101100 !"
b101100 ^
b111 k
b111 f
b110000 *"
b110000 g
b110 t
b110 o
b110000 3"
b110000 p
b101 x
b101100 <"
b101100 y
b1011 )"
b1011 $"
b10001001 F"
b10001001 %"
b1010 2"
b1010 -"
b10001100 O"
b10001100 ."
b1001 ;"
b1001 6"
b10001001 X"
b10001001 7"
b1110 N"
b1110 I"
b100110000 J"
b1101 W"
b1101 R"
b100110000 S"
b100010100 (
b100 ,
1!
#85
0!
#90
b0 ~
b10000 E"
b10000000000000000000000000000000000000000000000000000 &
b1001100000000000100110000 (
b1101 `"
b1101 ["
b101001100 \"
b1110 W"
b1110 R"
b101010000 S"
b1111 N"
b1111 I"
b101001100 J"
b1001 ?"
b10011000 a"
b10011000 @"
b1010 ;"
b1010 6"
b10011110 X"
b10011110 7"
b1011 2"
b1011 -"
b10011110 O"
b10011110 ."
b1100 )"
b1100 $"
b10011000 F"
b10011000 %"
b110 x
b111000 <"
b111000 y
b111 t
b111 o
b111010 3"
b111010 p
b1000 k
b1000 f
b111000 *"
b111000 g
b0 b
b0 ]
b0 !"
b0 ^
b11 S
b1100 u
b1100 T
b100 O
b100 J
b1100 l
b1100 K
b0 F
b0 A
b0 c
b0 B
b100 ,
1!
#95
0!
#100
b0 E"
b0 &
b0 O
b0 J
b0 l
b0 K
b100 S
b10000 u
b10000 T
b0 k
b0 f
b0 *"
b0 g
b1000 t
b1000 o
b1000100 3"
b1000100 p
b111 x
b1000100 <"
b1000100 y
b0 )"
b0 $"
b0 F"
b0 %"
b1100 2"
b1100 -"
b10110000 O"
b10110000 ."
b1011 ;"
b1011 6"
b10110011 X"
b10110011 7"
b1010 ?"
b10110000 a"
b10110000 @"
b10000 N"
b10000 I"
b101101000 J"
b1111 W"
b1111 R"
b101110000 S"
b1110 `"
b1110 ["
b101110000 \"
b1101 d"
b101101000 e"
b10100110000000001010100000000000101001100 (
b100 ,
1!
#105
0!
#110
b101101000000000010111000000000001011100000000000101101000 (
b1110 d"
b110010000 e"
b1111 `"
b1111 ["
b110010100 \"
b10000 W"
b10000 R"
b110010000 S"
b0 N"
b0 I"
b0 J"
b1011 ?"
b11001000 a"
b11001000 @"
b1100 ;"
b1100 6"
b11001000 X"
b11001000 7"
b0 2"
b0 -"
b0 O"
b0 ."
b1000 x
b1010000 <"
b1010000 y
b0 t
b0 o
b0 3"
b0 p
b0 S
b0 u
b0 T
b100 ,
1!
#115
0!
#120
b0 x
b0 <"
b0 y
b0 ;"
b0 6"
b0 X"
b0 7"
b1100 ?"
b11100000 a"
b11100000 @"
b0 W"
b0 R"
b0 S"
b10000 `"
b10000 ["
b110111000 \"
b1111 d"
b110111000 e"
b110010000000000011001010000000001100100000000000000000000 (
b100 ,
1!
#125
0!
#130
b110111000000000011011100000000000000000000000000000000000 (
b10000 d"
b111100000 e"
b0 `"
b0 ["
b0 \"
b0 ?"
b0 a"
b0 @"
b100 ,
1!
#135
0!
#140
b0 d"
b0 e"
b111100000000000000000000000000000000000000000000000000000 (
b100 ,
1!
#145
0!
#150
b0 (
b100 ,
1!
#155
0!
#160
b100 ,
1!
#165
0!
#170
b100 ,
1!
#175
0!
#180
b100 ,
1!
#185
0!
#190
b100 ,
1!
#195
0!
#200
b100 ,
1!
#205
0!
#210
b100 ,
1!
#215
0!
#220
b100 ,
1!
#221
